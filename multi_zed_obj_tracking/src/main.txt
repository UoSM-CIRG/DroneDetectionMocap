#include <iostream>
#include <cmath>
#include "cuda_utils.h"

#include "GLViewer.hpp"
#include "ClientPublisher.hpp"

#include "logging.h"
#include "utils.h"
#include <NvInfer.h>

using namespace nvinfer1;

std::map<int, sl::Transform> initCameraTransformMatrices(std::map<int, sl::Transform> &tfs)
{
    std::map<int, sl::Transform> T_cam_world;

    bool is_world_set = false;
    int first_index = 0;
    // Iterate over camera poses
    for (auto &tf : tfs)
    {
        if (!is_world_set)
        {
            T_cam_world[tf.first] = sl::Transform::identity();
            first_index = tf.first;
            is_world_set = true;
        }
        else
        {
            auto pose_transpose = sl::Transform::transpose(tf.second);
            T_cam_world[tf.first] = pose_transpose * T_cam_world[first_index];
        }
    } 
    return T_cam_world;
}

// Test sl transformation/coordinate frame
int main()
{

    // Set camera poses
    sl::Pose pose0, pose1, pose2;

    pose0.pose_data.setEulerAngles((-0.732543, -0.0953039, -0.117983), true);
    pose0.pose_data.setTranslation(sl::Translation(0.0, 2.2094175815582275, 0.0));

    pose1.pose_data.setEulerAngles((-0.726495, -2.28899, -0.00255294), true);
    pose1.pose_data.setTranslation(sl::Translation(-1.3311572074890137, 2.176055908203125, -5.2541351318359375));

    pose2.pose_data.setEulerAngles((-0.70687, 1.93397, 0.12587), true);
    pose2.pose_data.setTranslation(sl::Translation(4.047536373138428, 2.1313979625701904, -5.437626838684082));

    std::map<int, sl::Transform> poses;
    poses[0] = pose0.pose_data;
    poses[1] = pose0.pose_data;
    poses[2] = pose0.pose_data;
    auto tf = initCameraTransformMatrices(poses);

    // Define points
    sl::float3 p0(0.300273 , 1.04682 , -4.60355);
    sl::float3 p1(-0.210046 , -0.241954 , -3.17391);
    sl::float3 p2(-0.377869 , 0.902485 , -4.51726);

    sl::float3 p3(0.301793, 1.03868, -4.61498);
    sl::float3 p4(-0.208427, -0.240715, -3.17372);
    sl::float3 p5(-0.376915, 0.897295, -4.51509);

    // auto pose1_inverse = pose1.pose_data;
    // pose1_inverse.transpose();

    // auto pose2_inverse = pose2.pose_data;
    // pose2_inverse.transpose();

    // sl::Transform T_cam0_cam0 = pose0.pose_data.identity();
    // sl::Transform T_cam0_cam1 = pose1_inverse * pose0.pose_data;
    // sl::Transform T_cam0_cam2 = pose2_inverse * pose0.pose_data;

    // Apply transformations
    // sl::float3 aligned_0 = T_cam0_cam0.getTranslation() + p0 * T_cam0_cam0.getRotationMatrix();
    // sl::float3 aligned_1 = T_cam0_cam1.getTranslation() + p1 * T_cam0_cam1.getRotationMatrix();
    // sl::float3 aligned_2 = T_cam0_cam2.getTranslation() + p2 * T_cam0_cam2.getRotationMatrix();

    // sl::float3 aligned_3 = T_cam0_cam0.getTranslation() + p3 * T_cam0_cam0.getRotationMatrix();
    // sl::float3 aligned_4 = T_cam0_cam1.getTranslation() + p4 * T_cam0_cam1.getRotationMatrix();
    // sl::float3 aligned_5 = T_cam0_cam2.getTranslation() + p5 * T_cam0_cam2.getRotationMatrix();

    sl::float3 aligned_0 = tf[0].getTranslation() + p0 * tf[0].getRotationMatrix();
    sl::float3 aligned_1 = tf[1].getTranslation() + p1 * tf[1].getRotationMatrix();
    sl::float3 aligned_2 = tf[2].getTranslation() + p2 * tf[2].getRotationMatrix();

    sl::float3 aligned_3 = tf[0].getTranslation() + p3 * tf[0].getRotationMatrix();
    sl::float3 aligned_4 = tf[1].getTranslation() + p4 * tf[1].getRotationMatrix();
    sl::float3 aligned_5 = tf[2].getTranslation() + p5 * tf[2].getRotationMatrix();

    sl::float3 avg_012 = aligned_0 + aligned_1 + aligned_2;
    avg_012 = avg_012/3;

    sl::float3 avg_345 = aligned_3 + aligned_4 + aligned_5;
    avg_345 = avg_345/3;

    // Print result
    std::cout << "Point in camera frame 0: " << aligned_0.x << ", " << aligned_0.y << ", " << aligned_0.z << std::endl;
    std::cout << "Point in camera frame 1: " << aligned_1.x << ", " << aligned_1.y << ", " << aligned_1.z << std::endl;
    std::cout << "Point in camera frame 2: " << aligned_2.x << ", " << aligned_2.y << ", " << aligned_2.z << std::endl;
    
    std::cout << "Fused 012              : " << avg_012.x << ", " << avg_012.y << ", " << avg_012.z << std::endl;

    std::cout << "Point in camera frame 3: " << aligned_3.x << ", " << aligned_3.y << ", " << aligned_3.z << std::endl;
    std::cout << "Point in camera frame 4: " << aligned_4.x << ", " << aligned_4.y << ", " << aligned_4.z << std::endl;
    std::cout << "Point in camera frame 5: " << aligned_5.x << ", " << aligned_5.y << ", " << aligned_5.z << std::endl;
    
    std::cout << "Fused 345              : " << avg_345.x << ", " << avg_345.y << ", " << avg_345.z << std::endl;

    return 0;

}